// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id    String  @id @default(uuid())
  phone String  @unique
  name  String?
  refreshToken String?
}


//model City {
//  id            String     @id @default(uuid())
//  createdAt     DateTime   @default(now())
//  updatedAt     DateTime   @updatedAt
//  name          String
//  description   String?
//  categories    Category[]
//  products      Product[]
//  productPrice  ProductPrice[]
//  cityUrl       CityUrl[]
//}
//
//model CityUrl {
//  id        Int    @id @default(autoincrement())
//  createdAt DateTime  @default(now())
//  href      String    @unique
//  cityId    String
//  city      City      @relation(fields: [cityId], references: [id])
//}
//
//model Product {
//  id            String     @id @default(uuid())
//  createdAt     DateTime   @default(now())
//  updatedAt     DateTime   @updatedAt
//  name          String
//  sku           String     @unique
//  description   String?
//  quantity      Int
//  categories    Category[]
//  orders        Order[]
//  city          City[]
//  productPrice  ProductPrice[]
//}
//
//model Category {
//  id        Int       @id @default(autoincrement())
//  createdAt DateTime  @default(now())
//  updatedAt DateTime  @updatedAt
//  name      String
//  products  Product[]
//  city      City[]
//}
//
//model ProductPrice {
//  id        String    @id @default(uuid())
//  createdAt DateTime  @default(now())
//  price     String
//  cityId    String
//  city      City      @relation(fields: [cityId], references: [id])
//  productId String
//  product   Product   @relation(fields: [productId], references: [id])
//}
//
//model Order {
//  id        String    @id @default(uuid())
//  createdAt DateTime  @default(now())
//  updatedAt DateTime  @updatedAt
//  userId    Int?
//  customer  User?     @relation(fields: [userId], references: [id])
//  products  Product[]
//}
//
//model User {
//  id        Int      @id @default(autoincrement())
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  email     String   @unique
//  firstName String?
//  lastName  String?
//  address   String?
//  orders    Order[]
//  password  String?
//}


